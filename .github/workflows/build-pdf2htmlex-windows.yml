name: build-pdf2htmlex-windows-x64

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-windows-x64:
    runs-on: windows-latest
    env:
      MSYSTEM: UCRT64
      PKG_CONFIG_PATH: /ucrt64/lib/pkgconfig:/ucrt64/share/pkgconfig
    steps:
      - name: Checkout this repo (workflow + scripts)
        uses: actions/checkout@v4

      - name: Checkout upstream pdf2htmlEX sources
        uses: actions/checkout@v4
        with:
          repository: pdf2htmlEX/pdf2htmlEX
          path: upstream
          # For reproducible builds, pin a known-good tag/commit:
          # ref: v0.18.8.rc2

      # Verify paths using Git-Bash (no MSYS2 dependency yet)
      - name: Verify source layout
        shell: bash
        run: |
          test -f upstream/CMakeLists.txt || { echo 'CMakeLists not found at upstream/'; ls -la upstream; exit 1; }

      - name: Set up MSYS2 (UCRT64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-poppler
            mingw-w64-ucrt-x86_64-poppler-data
            mingw-w64-ucrt-x86_64-cairo
            mingw-w64-ucrt-x86_64-fontforge
            mingw-w64-ucrt-x86_64-libspiro
            mingw-w64-ucrt-x86_64-libjpeg-turbo
            mingw-w64-ucrt-x86_64-libpng
            mingw-w64-ucrt-x86_64-freetype
            mingw-w64-ucrt-x86_64-fontconfig
            mingw-w64-ucrt-x86_64-libxml2
            mingw-w64-ucrt-x86_64-ntldd

      - name: Toolchain sanity check
        shell: msys2 {0}
        run: |
          gcc --version
          pkg-config --modversion poppler || true
          pkg-config --list-all | grep -E 'poppler|cairo|fontforge|libfontforge' || true

      - name: Configure (CMake + Ninja)
        shell: msys2 {0}
        run: |
          cmake -S upstream -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=/ucrt64 \
            -DCMAKE_INSTALL_PREFIX="${GITHUB_WORKSPACE}/_install"

      - name: Build
        shell: msys2 {0}
        run: cmake --build build --config Release -j 2

      - name: Install to staging
        shell: msys2 {0}
        run: cmake --install build --prefix "${GITHUB_WORKSPACE}/_install"

      - name: Smoke-test CLI
        shell: msys2 {0}
        run: |
          "${GITHUB_WORKSPACE}/_install/bin/pdf2htmlEX.exe" --version || true

      - name: Bundle exe + runtime DLLs + resources
        shell: msys2 {0}
        run: |
          set -euo pipefail
          mkdir -p dist/bin dist/share

          EXE="${GITHUB_WORKSPACE}/_install/bin/pdf2htmlEX.exe"
          test -f "$EXE" || { echo "pdf2htmlEX.exe not found: $EXE"; find "${GITHUB_WORKSPACE}/_install" -type f -iname '*pdf2htmlEX*.exe' -maxdepth 5 -print; exit 1; }

          cp "$EXE" dist/bin/

          pushd dist/bin >/dev/null
          # Copy dependent DLLs (UCRT64 or MINGW64)
          ntldd -R "$(basename "$EXE")" | awk '/\/(ucrt64|mingw64)\// {print $3}' | xargs -I{} cp -u {} .
          popd >/dev/null

          # Copy installed pdf2htmlEX resources (css/js)
          if [ -d "${GITHUB_WORKSPACE}/_install/share/pdf2htmlEX" ]; then
            mkdir -p dist/share/pdf2htmlEX
            cp -r "${GITHUB_WORKSPACE}/_install/share/pdf2htmlEX/"* dist/share/pdf2htmlEX/
          fi

          # Copy Poppler data (cmaps, etc.)
          for d in /ucrt64/share/poppler /mingw64/share/poppler; do
            if [ -d "$d" ]; then
              mkdir -p dist/share/poppler
              cp -r "$d"/* dist/share/poppler/ || true
            fi
          done

          7z a -tzip "${GITHUB_WORKSPACE}/pdf2htmlEX-windows-x64.zip" ./dist/*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf2htmlEX-windows-x64
          path: pdf2htmlEX-windows-x64.zip

      - name: Create GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: pdf2htmlEX-windows-x64.zip
          generate_release_notes: true

# Why this should build reliably
# - Fixes your error: do not use the `msys2` shell until after the MSYS2 setup step. The path
#   check now uses `bash`, and CMake points to the correct source root `upstream/`.
# - Meets functional requirements for a Windows build: Poppler (+poppler-data), FontForge (+libspiro),
#   Cairo, Freetype, Fontconfig, libpng, libjpeg-turbo, libxml2, toolchain, CMake, Ninja, pkg-config.
# - Uses MSYS2 UCRT64 to match current MSYS2 guidance and improves ABI compatibility.
# - Bundles all needed DLLs with `ntldd -R` and includes Poppler data + pdf2htmlEX assets for a runnable ZIP.
# - Switch to MINGW64 by changing `msystem` and replacing package prefixes if needed.
