jobs:
  build-win:
    name: build-win
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up MSYS2 with MINGW64 toolchain
        uses: msys2/setup-msys2@v2
        with:
          release: true
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            git
            curl
            wget
            zip
            unzip
            p7zip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-poppler
            mingw-w64-x86_64-poppler-data
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-fontconfig
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libtiff
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-icu
            mingw-w64-x86_64-fontforge
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-brotli
            mingw-w64-x86_64-zstd
            mingw-w64-x86_64-expat
            mingw-w64-x86_64-pcre2

      - name: Show tool versions
        run: |
          gcc --version
          cmake --version
          ninja --version
          pkgconf --version
          fontforge -version || true

      - name: Configure
        working-directory: ${{ github.workspace }}
        env:
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig
          CC: x86_64-w64-mingw32-gcc
          CXX: x86_64-w64-mingw32-g++
        run: |
          rm -rf build && mkdir -p build
          cd build
          cmake -G Ninja .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/mingw64 \
            -DBUILD_SHARED_LIBS=OFF

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: |
          ninja -v

      - name: Package (zip)
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p out
          # adjust the binary name/path if your project outputs somewhere else
          if [ -f build/pdf2htmlEX.exe ]; then
            cp build/pdf2htmlEX.exe out/
          else
            # common alternative output path
            find build -maxdepth 2 -name "pdf2htmlEX*.exe" -print -exec cp {} out/ \;
          fi
          # bundle needed DLLs (static preferred; if shared slipped in, grab runtime dlls)
          # you can uncomment next line to auto-copy runtime deps if needed:
          # ntldd -R out/pdf2htmlEX.exe | awk '/mingw64/ {print $3}' | xargs -I{} cp -u {} out/
          7z a -tzip out/pdf2htmlEX-win.zip out/*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf2htmlEX-win
          path: out/pdf2htmlEX-win.zip
