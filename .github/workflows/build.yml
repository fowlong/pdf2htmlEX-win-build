name: win64-pdf2htmlEX

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 0) Checkout (your repo; source is cloned below)
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Install MSYS2 (64-bit MinGW) + deps
      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            base-devel
            git
            cmake
            ninja
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-poppler
            mingw-w64-x86_64-poppler-data
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-icu
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-lcms2
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-fribidi
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-fontforge
            mingw-w64-x86_64-ntldd-git

      # 2) Get pdf2htmlEX sources (maintained fork)
      - name: Fetch pdf2htmlEX sources
        shell: msys2 {0}
        run: |
          set -e
          git clone --depth 1 --recursive https://github.com/pdf2htmlEX/pdf2htmlEX.git source
          if [ -f source/CMakeLists.txt ]; then
            echo "SRCDIR=$PWD/source" >> $GITHUB_ENV
          elif [ -f source/pdf2htmlEX/CMakeLists.txt ]; then
            echo "SRCDIR=$PWD/source/pdf2htmlEX" >> $GITHUB_ENV
          else
            echo "::error ::CMakeLists.txt not found in cloned repo"; exit 1
          fi

      # 3) Patch too-old CMake minimums to 3.5 (avoids the policy error you saw)
      - name: Patch CMake minimum versions (to 3.5)
        shell: msys2 {0}
        run: |
          set -e
          find "$SRCDIR" -name CMakeLists.txt -print \
            -exec sed -i -E 's/cmake_minimum_required\s*\(\s*VERSION\s*[0-9.]+\)/cmake_minimum_required(VERSION 3.5)/g' {} +

      # 4) Configure with CMake (uses MSYS2 Poppler via pkg-config)
      - name: Configure (CMake + Ninja)
        shell: msys2 {0}
        env:
          PKG_CONFIG_EXECUTABLE: /mingw64/bin/pkg-config
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig
        run: |
          set -e
          cmake -S "$SRCDIR" -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=/mingw64 \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5
          pkg-config --modversion poppler-glib || true

      # 5) Build
      - name: Build
        shell: msys2 {0}
        run: |
          set -e
          cmake --build build --parallel
          EXE=""
          [ -f build/pdf2htmlEX.exe ] && EXE="build/pdf2htmlEX.exe"
          [ -z "$EXE" ] && [ -f build/src/pdf2htmlEX.exe ] && EXE="build/src/pdf2htmlEX.exe"
          [ -z "$EXE" ] && { echo "::error ::pdf2htmlEX.exe not found"; ls -R build; exit 1; }
          strip "$EXE" || true
          echo "EXE=$EXE" >> $GITHUB_ENV

      # 6) Bundle runtime DLLs and poppler-data â†’ portable folder
      - name: Bundle DLLs (portable dist)
        shell: msys2 {0}
        run: |
          set -e
          mkdir -p dist
          cp "$EXE" dist/
          # copy only MinGW DLLs (ignore Windows system DLLs)
          ntldd -R dist/pdf2htmlEX.exe \
            | awk '/=>/ && $3 ~ /^\/mingw64\/bin\// {print $3}' \
            | tr -d '\r' | sort -u | xargs -I{} cp -u {} dist/ || true
          # include poppler data (cmaps, etc.)
          if [ -d /mingw64/share/poppler ]; then
            mkdir -p dist/share
            cp -r /mingw64/share/poppler dist/share/
          fi
          echo "=== Dist contents ==="; ls -l dist/

      # 7) Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf2htmlEX-win64-portable
          path: dist/**
