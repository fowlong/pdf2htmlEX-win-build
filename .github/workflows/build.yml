name: win64-pdf2htmlEX

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            base-devel
            git
            cmake
            ninja
            zip
            # toolchain + discovery
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkgconf
            # runtime deps
            mingw-w64-x86_64-poppler
            mingw-w64-x86_64-poppler-data
            mingw-w64-x86_64-cairo
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libxml2
            mingw-w64-x86_64-icu
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-openjpeg2
            mingw-w64-x86_64-lcms2
            mingw-w64-x86_64-harfbuzz
            mingw-w64-x86_64-fribidi
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-fontforge
            mingw-w64-x86_64-libspiro
            mingw-w64-x86_64-ntldd-git

      - name: Fetch pdf2htmlEX sources (no submodules)
        shell: msys2 {0}
        run: |
          set -e
          git clone --depth 1 https://github.com/pdf2htmlEX/pdf2htmlEX.git source
          if [ -f source/CMakeLists.txt ]; then
            echo "SRCDIR=$PWD/source" >> $GITHUB_ENV
          elif [ -f source/pdf2htmlEX/CMakeLists.txt ]; then
            echo "SRCDIR=$PWD/source/pdf2htmlEX" >> $GITHUB_ENV
          else
            echo "::error ::CMakeLists.txt not found in cloned repo"; exit 1
          fi
          # nuke any vendored poppler to avoid local path detection
          if [ -d source/poppler ]; then rm -rf source/poppler; fi

      - name: Patch CMake minimum versions (to 3.5)
        shell: msys2 {0}
        run: |
          set -e
          find "$SRCDIR" -name CMakeLists.txt -print \
            -exec sed -i -E 's/cmake_minimum_required\s*\(\s*VERSION\s*[0-9.]+\)/cmake_minimum_required(VERSION 3.5)/g' {} +

      # -------- PLAN A: force system Poppler via pkg-config + explicit hints --------
      - name: Configure (Plan A: system Poppler)
        id: cfg_sys
        continue-on-error: true
        shell: msys2 {0}
        env:
          PKG_CONFIG_EXECUTABLE: /mingw64/bin/pkg-config
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig
        run: |
          set -e
          POP_INC=$(/mingw64/bin/pkg-config --cflags-only-I poppler-glib | sed 's/-I//g' | tr -d '\r')
          cmake -S "$SRCDIR" -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=/mingw64 \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
            -DPOPPLER_INCLUDE_DIR=/mingw64/include/poppler \
            -DPOPPLER_INCLUDE_DIRS="/mingw64/include;/mingw64/include/poppler" \
            -DPOPPLER_GLIB_INCLUDE_DIR=/mingw64/include/poppler/glib \
            -DPOPPLER_GLIB_INCLUDE_DIRS="/mingw64/include/poppler/glib" \
            -DPOPPLER_LIBRARY=/mingw64/lib/libpoppler.dll.a \
            -DPOPPLER_LIBRARIES="/mingw64/lib/libpoppler.dll.a;/mingw64/lib/libpoppler-glib.dll.a" \
            -DPOPPLER_GLIB_LIBRARY=/mingw64/lib/libpoppler-glib.dll.a \
            -DPOPPLER_GLIB_LIBRARIES="/mingw64/lib/libpoppler-glib.dll.a"
          /mingw64/bin/pkg-config --modversion poppler-glib || true

      - name: Build (Plan A)
        id: build_sys
        if: steps.cfg_sys.outcome == 'success'
        continue-on-error: true
        shell: msys2 {0}
        run: |
          set -e
          cmake --build build --parallel
          EXE=""
          [ -f build/pdf2htmlEX.exe ] && EXE="build/pdf2htmlEX.exe"
          [ -z "$EXE" ] && [ -f build/src/pdf2htmlEX.exe ] && EXE="build/src/pdf2htmlEX.exe"
          [ -n "$EXE" ] && strip "$EXE" || true
          [ -n "$EXE" ] && echo "EXE=$EXE" >> $GITHUB_ENV || { echo "::warning ::Plan A did not produce exe"; exit 1; }

      # -------- PLAN B: build Poppler from source and relink --------
      - name: Build Poppler from source (fallback)
        id: build_poppler
        if: steps.build_sys.outcome != 'success'
        shell: msys2 {0}
        run: |
          set -e
          mkdir -p /opt && cd /opt
          for TAG in poppler-0.89.0 poppler-0.86.1 poppler-0.81.0; do
            echo ">>> Trying Poppler tag: $TAG"
            rm -rf poppler poppler-install || true
            git clone --depth 1 --branch "$TAG" https://gitlab.freedesktop.org/poppler/poppler.git
            cd poppler && mkdir build && cd build
            cmake .. -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_PREFIX_PATH=/mingw64 \
              -DCMAKE_INSTALL_PREFIX=/opt/poppler-install \
              -DBUILD_SHARED_LIBS=ON \
              -DENABLE_GLIB=ON \
              -DENABLE_CAIRO=ON \
              -DENABLE_CPP=OFF \
              -DENABLE_UTILS=OFF \
              -DENABLE_QT5=OFF \
              -DENABLE_QT6=OFF \
              -DENABLE_GPGME=OFF \
              -DENABLE_LIBCURL=OFF \
              -DRUN_GPERF_IF_PRESENT=OFF \
              -DENABLE_UNSTABLE_API_ABI_HEADERS=ON
            if cmake --build . --parallel && cmake --install .; then
              echo "POPPLER_PC=/opt/poppler-install/lib/pkgconfig" >> $GITHUB_ENV
              echo "POPPLER_BIN=/opt/poppler-install/bin" >> $GITHUB_ENV
              echo "POPPLER_OK=1" >> $GITHUB_ENV
              break
            fi
            cd /opt
          done
          test "$POPPLER_OK" = "1" || { echo "::error ::Failed to build Poppler fallback"; exit 1; }

      - name: Re-configure (Plan B: vendored Poppler)
        id: cfg_local
        if: steps.build_sys.outcome != 'success'
        shell: msys2 {0}
        env:
          PKG_CONFIG_EXECUTABLE: /mingw64/bin/pkg-config
          PKG_CONFIG_PATH: ${{ env.POPPLER_PC }}:/mingw64/lib/pkgconfig
        run: |
          set -e
          rm -rf build
          cmake -S "$SRCDIR" -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="/mingw64" \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5
          /mingw64/bin/pkg-config --modversion poppler-glib

      - name: Build (Plan B)
        id: build_local
        if: steps.build_sys.outcome != 'success'
        shell: msys2 {0}
        run: |
          set -e
          cmake --build build --parallel
          EXE=""
          [ -f build/pdf2htmlEX.exe ] && EXE="build/pdf2htmlEX.exe"
          [ -z "$EXE" ] && [ -f build/src/pdf2htmlEX.exe ] && EXE="build/src/pdf2htmlEX.exe"
          [ -z "$EXE" ] && { echo "::error ::pdf2htmlEX.exe not found after Plan B build"; ls -R build; exit 1; }
          strip "$EXE" || true
          echo "EXE=$EXE" >> $GITHUB_ENV

      - name: Bundle DLLs (portable dist)
        shell: msys2 {0}
        run: |
          set -e
          test -n "$EXE" || { echo "::error ::EXE path missing"; exit 1; }
          mkdir -p dist
          cp "$EXE" dist/
          # copy MinGW + vendored poppler DLLs (ignore Windows system DLLs)
          ntldd -R dist/pdf2htmlEX.exe | awk '/=>/ {print $3}' | tr -d '\r' | sort -u | while read f; do
            case "$f" in
              /mingw64/bin/*|${POPPLER_BIN:-/opt/does-not-exist}/**|/opt/poppler-install/bin/*) cp -u "$f" dist/ 2>/dev/null || true ;;
            esac
          done
          # poppler-data
          if [ -d /mingw64/share/poppler ]; then
            mkdir -p dist/share
            cp -r /mingw64/share/poppler dist/share/
          fi
          echo "=== Dist contents ==="; ls -l dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf2htmlEX-win64-portable
          path: dist/**
